package frc.robot.generated;

import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.kinematics.SwerveDriveKinematics;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.wpilibj.RobotController;

/**
 * Constants for swerve drive subsystem.
 * Generated by Thrifty Swerve Generator.
 * Generated on: 2025-07-09T13:41:48.261Z
 */
public final class SwerveConstants {
    // RoboRio Serial Number
    public static final String SERIAL_NUMBER = RobotController.getSerialNumber();

    // Drive base dimensions
    public static final double DRIVE_BASE_WIDTH_METERS = 0.5842;
    public static final double DRIVE_BASE_LENGTH_METERS = 0.5842;

    // Gear ratios
    public static final double DRIVE_GEAR_RATIO = 6;
    public static final double AZIMUTH_GEAR_RATIO = 25;

    // Wheel specifications
    public static final double WHEEL_DIAMETER_INCHES = 4;
    public static final double WHEEL_DIAMETER_METERS = Units.inchesToMeters(4);

    // Top Speed
    public static final double TOP_SPEED_MOTOR_RPM = 5676;
    public static final double TOP_SPEED_METERS_PER_SEC = 5.02;

    // Module locations from center of robot
    private static final double HALF_WIDTH = DRIVE_BASE_WIDTH_METERS / 2.0;
    private static final double HALF_LENGTH = DRIVE_BASE_LENGTH_METERS / 2.0;

    // Kinematics
    public static final Translation2d FRONT_LEFT_LOCATION = new Translation2d(HALF_LENGTH, HALF_WIDTH);
    public static final Translation2d FRONT_RIGHT_LOCATION = new Translation2d(HALF_LENGTH, -HALF_WIDTH);
    public static final Translation2d BACK_LEFT_LOCATION = new Translation2d(-HALF_LENGTH, HALF_WIDTH);
    public static final Translation2d BACK_RIGHT_LOCATION = new Translation2d(-HALF_LENGTH, -HALF_WIDTH);

    public static final SwerveDriveKinematics DRIVE_KINEMATICS = new SwerveDriveKinematics(
            FRONT_LEFT_LOCATION,
            FRONT_RIGHT_LOCATION,
            BACK_LEFT_LOCATION,
            BACK_RIGHT_LOCATION);

    public static enum EncoderType {
        REDUX_ENCODER, SRX_MAG_ENCODER, REV_ENCODER, Thrifty_Absolute_Encoder
    }

    // Module constants
    public static final class ModuleConstants {
        // Front Left Module
        public static final int FRONT_LEFT_DRIVE_MOTOR_ID = 11;
        public static final int FRONT_LEFT_AZIMUTH_MOTOR_ID = 10;
        public static final double FRONT_LEFT_ENCODER_OFFSET = 0.2272;  // moved to function to load offset based on connected robot
        public static final boolean FRONT_LEFT_DRIVE_MOTOR_INVERTED = false;

        // Front Right Module
        public static final int FRONT_RIGHT_DRIVE_MOTOR_ID = 41;
        public static final int FRONT_RIGHT_AZIMUTH_MOTOR_ID = 40;
        public static final double FRONT_RIGHT_ENCODER_OFFSET = 0.0215;  // moved to function to load offset based on connected robot
        public static final boolean FRONT_RIGHT_DRIVE_MOTOR_INVERTED = false;

        // Back Left Module
        public static final int BACK_LEFT_DRIVE_MOTOR_ID = 21;
        public static final int BACK_LEFT_AZIMUTH_MOTOR_ID = 20;
        public static final double BACK_LEFT_ENCODER_OFFSET = 0.5338;  // moved to function to load offset based on connected robot
        public static final boolean BACK_LEFT_DRIVE_MOTOR_INVERTED = false;

        // Back Right Module
        public static final int BACK_RIGHT_DRIVE_MOTOR_ID = 31;
        public static final int BACK_RIGHT_AZIMUTH_MOTOR_ID = 30;
        public static final double BACK_RIGHT_ENCODER_OFFSET = 0.0997;  // moved to function to load offset based on connected robot
        public static final boolean BACK_RIGHT_DRIVE_MOTOR_INVERTED = false;

        // Common encoder type
        public static final EncoderType ENCODER_SELECTED = EncoderType.Thrifty_Absolute_Encoder;

        //Gets the Encoder offset based on the Serial number of the RoboRio
        public static double getFrontLeftEncoderOffset() {
            double offset = 0.0;
            switch (RobotController.getSerialNumber()) {
                case "023D6352":
                    offset = 0.2272;
                    break;

                case "23FD1A9":
                    offset = 0.0;
                    break;

                case "23FD17D":
                    offset = 0.0;
                    break;

                case "32FD18":
                    offset = 0.0;
                    break;

                default:
                    break;
            }
            return offset;
        }

        //Gets the Encoder offset based on the Serial number of the RoboRio
        public static double getFrontRightEncoderOffset() {
            double offset = 0.0;
            switch (RobotController.getSerialNumber()) {
                case "023D6352":
                    offset = 0.0215;
                    break;

                case "23FD1A9":
                    offset = 0.0;
                    break;

                case "23FD17D":
                    offset = 0.0;
                    break;

                case "32FD18":
                    offset = 0.0;
                    break;

                default:
                    break;
            }
            return offset;
        }
       
        //Gets the Encoder offset based on the Serial number of the RoboRio
        public static double getBackLeftEncoderOffset() {
            double offset = 0.0;
            switch (RobotController.getSerialNumber()) {
                case "023D6352":
                    offset = 0.5338;
                    break;

                case "23FD1A9":
                    offset = 0.0;
                    break;

                case "23FD17D":
                    offset = 0.0;
                    break;

                case "32FD18":
                    offset = 0.0;
                    break;

                default:
                    break;
            }
            return offset;
        }
       
        //Gets the Encoder offset based on the Serial number of the RoboRio
        public static double getBackRightEncoderOffset() {
            double offset = 0.0;
            switch (RobotController.getSerialNumber()) {
                case "023D6352":
                    offset = 0.0997;
                    break;

                case "23FD1A9":
                    offset = 0.0;
                    break;

                case "23FD17D":
                    offset = 0.0;
                    break;

                case "32FD18":
                    offset = 0.0;
                    break;

                default:
                    break;
            }
            return offset;
        }
 
    }

    // Gyro constants
    public static final class GyroConstants {
        public static final String GYRO_TYPE = "Pigeon 2.0";
    }
}